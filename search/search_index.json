{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u65e5\u62f1\u4e00\u5352","text":""},{"location":"408/408/","title":"408","text":""},{"location":"408/408/#links","title":"links","text":"<ul> <li>\u7adf\u6210</li> <li>\u738b\u9053</li> </ul>"},{"location":"408/4081-CL/NULL/","title":"NULL","text":"<pre><code>#define NULL ((void*)0)\n</code></pre>"},{"location":"408/4081-CL/NULL/#void","title":"<code>void*</code>","text":"<p>In C and C++, <code>void*</code> is a special type of pointer known as a \"void pointer.\" It is a generic pointer type that can point to any data type, but it is not associated with any specific data type itself. Essentially, <code>void*</code> is a pointer to \"nothing,\" meaning it can point to any kind of data, whether it's an <code>int</code>, <code>char</code>, <code>struct</code>, or anything else.</p>"},{"location":"408/4081-CL/NULL/#characteristics-of-void","title":"Characteristics of <code>void*</code>","text":"<ul> <li>Generic Pointer: A <code>void*</code> pointer can be used to point to any data type. You can assign it the address of any variable, regardless of its type.</li> <li>Cannot Dereference Directly: You cannot directly dereference a <code>void*</code> pointer because the compiler does not know the type of data it is pointing to. To dereference it, you need to cast it to a pointer of the appropriate type.</li> <li>Type Safety: Since <code>void*</code> is a generic pointer, it bypasses type safety. You must cast it to the correct type before using it.</li> </ul> <pre><code>int x = 10;\nchar y = 'A';\n\nvoid* ptr;\nptr = &amp;x;  // ptr points to an integer\nptr = &amp;y;  // ptr can also point to a character now\n</code></pre> <pre><code>int x = 10;\nvoid* ptr = &amp;x;\nprintf(\"%d\\n\", *((int*)ptr));  // Cast the void pointer to an int pointer before dereferencing\n</code></pre>"},{"location":"408/4081-CL/NULL/#void0","title":"<code>((void*)0)</code>","text":"<p><code>((void*)0)</code> is a common expression used to represent a null pointer of type <code>void*</code>.</p> <ul> <li> <p><code>(void*)</code>: This is a type cast that tells the compiler that <code>0</code> should be interpreted as a pointer to <code>void</code>. In C, the literal <code>0</code> is often used to represent a null pointer, and casting it to <code>void*</code> makes it explicit that it's a pointer to <code>void</code>.</p> </li> <li> <p><code>0</code>: The integer <code>0</code> is commonly used to represent a null pointer in C. A null pointer is a pointer that is not pointing to any valid memory location.</p> </li> </ul> <p>So, <code>((void*)0)</code> explicitly represents a null void pointer. You may also see <code>NULL</code> used in the same way, which is often defined as <code>((void*)0)</code> in many C libraries:</p> <pre><code>void* ptr = (void*)0;  // Null pointer\n// or equivalently\nvoid* ptr = NULL;  // Null pointer, commonly used\n</code></pre> <p>This is equivalent to writing:</p> <pre><code>void* ptr = NULL;  // NULL is defined as ((void*)0)\n</code></pre>"},{"location":"408/4081-CL/NULL/#why-use-void0-instead-of-null","title":"Why use <code>((void*)0)</code> instead of <code>NULL</code>?","text":"<ul> <li><code>NULL</code> is typically defined as <code>((void*)0)</code>, so they are essentially the same in most systems. However, in some contexts or codebases, you might explicitly use <code>((void*)0)</code> for clarity or to avoid potential conflicts with <code>NULL</code> being redefined or not available.</li> </ul>"},{"location":"408/4081-CL/NULL/#use-in-code","title":"Use in code","text":"<pre><code>void* ptr = (void*)0;  // Null pointer to void\nif (ptr == (void*)0) {\n    printf(\"Pointer is NULL\\n\");\n}\n</code></pre>"},{"location":"408/4081-CL/NULL/#summary","title":"Summary","text":"<ul> <li> <p><code>void*</code> is a generic pointer type that can point to any data type.</p> </li> <li> <p><code>((void*)0)</code> is a way to represent a null pointer of type <code>void*</code>. It is often used to initialize or check for pointers that are not pointing to any valid memory address.</p> </li> </ul>"},{"location":"408/4081-CL/size_t/","title":"<code>size_t</code>","text":"<pre><code>typedef unsigned long size_t\n</code></pre>"},{"location":"408/4081-CL/sizeof/","title":"<code>sizeof</code>","text":"<p>Purpose: <code>sizeof</code> is a compile-time operator used to determine the size (in bytes) of a data type or object.</p>"},{"location":"408/4081-CL/sizeof/#syntax","title":"\ud83d\udd39 Syntax","text":"<pre><code>sizeof(expression)\nsizeof type\n</code></pre> <ul> <li>Parentheses are optional when used with a type in <code>sizeof</code>, but required when used with an expression.</li> </ul>"},{"location":"408/4081-CL/sizeof/#examples","title":"\ud83d\udd39 Examples","text":"<pre><code>sizeof(int);           // returns size of int (e.g., 4)\nsizeof x;              // if x is a variable\nsizeof(x + 1);         // evaluates type of the expression, not the result\n</code></pre>"},{"location":"408/4081-CL/sizeof/#key-characteristics","title":"\ud83d\udd39 Key Characteristics","text":"<ul> <li> <p>Evaluated at compile time (except for VLAs \u2013 Variable Length Arrays).</p> </li> <li> <p>Does not evaluate expressions:</p> </li> </ul> <pre><code>int x = 10;\nsizeof(x++);  // x is not incremented\n</code></pre>"},{"location":"408/4081-CL/sizeof/#common-sizes-in-bytes","title":"\ud83d\udd39 Common Sizes (in bytes)","text":"Type Typical Size (x86) <code>char</code> 1 <code>short</code> 2 <code>int</code> 4 <code>long</code> 4 or 8 <code>float</code> 4 <code>double</code> 8 pointer 4 or 8 <p>(Use <code>sizeof</code> instead of hardcoding these for portability.)</p>"},{"location":"408/4081-CL/sizeof/#use-cases","title":"\ud83d\udd39 Use Cases","text":"<p>Memory allocation:</p> <pre><code>int *arr = malloc(10 * sizeof(int));\n</code></pre> <p>Array size calculation:</p> <pre><code>int a[5];\nsize_t len = sizeof(a) / sizeof(a[0]);  // Number of elements\n</code></pre> <p>Portability and safety checks in system programming.</p>"},{"location":"408/4081-CL/sizeof/#notes-and-gotchas","title":"\u26a0\ufe0f Notes and Gotchas","text":"<ul> <li> <p><code>sizeof(\"abc\")</code> returns 4, because string literals include the null terminator.</p> </li> <li> <p>For pointers: <code>sizeof(ptr)</code> gives size of pointer, not what it points to.</p> </li> <li> <p>For structs: Includes padding for alignment.</p> </li> </ul>"},{"location":"408/4081-CL/compile/gcc-compile-standards/","title":"GCC \u7f16\u8bd1\u6807\u51c6\u901f\u67e5","text":""},{"location":"408/4081-CL/compile/gcc-compile-standards/#_1","title":"\ud83d\udccc \u57fa\u672c\u8bed\u6cd5","text":"<pre><code>gcc -std=&lt;\u6807\u51c6&gt; your_file.c -o output\n</code></pre> <p>\u4f8b\u5982\uff1a</p> <pre><code>gcc -std=c99 main.c -o main\n</code></pre>"},{"location":"408/4081-CL/compile/gcc-compile-standards/#_2","title":"\ud83d\udcda \u5e38\u7528\u6807\u51c6\u9009\u9879\u8bf4\u660e","text":"\u6807\u51c6\u540d\u79f0 \u7f16\u5199\u5f62\u5f0f \u7b80\u4ecb C89 <code>-std=c89</code> \u6216 <code>-std=iso9899:1990</code> ANSI C\uff0c\u65e9\u671f\u6807\u51c6\uff0c\u6709\u9650\u652f\u6301\u73b0\u4ee3\u7279\u6027 C90 <code>-std=c90</code>\uff08\u7b49\u540c\u4e8e c89\uff09 ISO \u91c7\u7eb3 C89 \u6807\u51c6\uff0c\u51e0\u4e4e\u76f8\u540c GNU89 <code>-std=gnu89</code> C89 + GNU \u6269\u5c55\uff08GCC \u9ed8\u8ba4\u7684\u65e7\u6807\u51c6\uff09 C99 <code>-std=c99</code> \u5f15\u5165 <code>//</code> \u6ce8\u91ca\u3001<code>inline</code>\u3001<code>stdint.h</code> \u7b49 GNU99 <code>-std=gnu99</code> C99 + GNU \u6269\u5c55 C11 <code>-std=c11</code> \u589e\u52a0 <code>_Generic</code>\u3001\u591a\u7ebf\u7a0b\u3001<code>static_assert</code> \u7b49 GNU11 <code>-std=gnu11</code> C11 + GNU \u6269\u5c55 C17\uff08C18\uff09 <code>-std=c17</code> \u6216 <code>-std=c18</code> C11 bug \u4fee\u6b63\u7248\u672c\uff0c\u5185\u5bb9\u57fa\u672c\u76f8\u540c C23 <code>-std=c2x</code>\uff08\u6216 <code>-std=c23</code>\uff0cGCC 13+\uff09 \u6700\u65b0\u6807\u51c6\uff0c\u5c1a\u672a\u5e7f\u6cdb\u652f\u6301"},{"location":"408/4081-CL/compile/gcc-compile-standards/#gnu","title":"\u2699\ufe0f \u5f3a\u5236\u6807\u51c6\uff08\u7981\u7528 GNU \u6269\u5c55\uff09","text":"<p>\u5982\u9700\u5b8c\u5168\u6309\u7167\u6807\u51c6\uff08\u4e0d\u542b GNU \u6269\u5c55\uff09\u7f16\u8bd1\uff1a</p> <pre><code>gcc -std=c99 -pedantic -Wall -Wextra your_file.c\n</code></pre> <p>\u8bf4\u660e\uff1a</p> <ul> <li> <p><code>-pedantic</code>\uff1a\u4e25\u683c\u9075\u5faa\u6807\u51c6</p> </li> <li> <p><code>-Wall</code>\uff1a\u5f00\u542f\u5927\u591a\u6570\u8b66\u544a</p> </li> <li> <p><code>-Wextra</code>\uff1a\u5f00\u542f\u66f4\u591a\u8b66\u544a</p> </li> </ul>"},{"location":"408/4081-CL/compile/gcc-compile-standards/#_3","title":"\ud83e\uddea \u793a\u4f8b\u6d4b\u8bd5\u4ee3\u7801","text":"<pre><code>// test.c\n#include &lt;stdio.h&gt;\n\nint main(void) {\n    printf(\"Hello, C standard!\\n\");\n    return 0;\n}\n</code></pre> <pre><code>gcc -std=c11 test.c -o test\n</code></pre>"},{"location":"408/4081-CL/compile/gcc-compile-standards/#_4","title":"\ud83e\udde9 \u68c0\u67e5\u5f53\u524d\u9ed8\u8ba4\u6807\u51c6","text":"<pre><code>echo | gcc -dM -E -x c - | grep __STDC_VERSION__\n</code></pre> <p>\u6216\u4f7f\u7528 <code>gcc -v</code> \u67e5\u770b\u7248\u672c\u4fe1\u606f\u3002</p>"},{"location":"408/4081-CL/macro/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%AE%8F/","title":"\u5185\u5b58\u5bf9\u9f50\u5b8f <code>ALIGN(size)</code>","text":"<pre><code>#define ALIGN(size) (((size) + ALIGNMENT - 1) &amp; ~(ALIGNMENT - 1))\n</code></pre>"},{"location":"408/4081-CL/macro/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%AE%8F/#_1","title":"\u2705 \u4e00\u3001\u5b8f\u5b9a\u4e49\u76ee\u7684","text":"<p>\u8be5\u5b8f\u7528\u4e8e\u5c06\u4efb\u610f\u7684 <code>size</code> \u5411\u4e0a\u5bf9\u9f50\u5230 <code>ALIGNMENT</code> \u7684\u6700\u5c0f\u6574\u6570\u500d\u3002\u8fd9\u662f\u5185\u5b58\u7ba1\u7406\u3001DMA\u3001\u7ed3\u6784\u4f53\u5bf9\u9f50\u7b49\u5e95\u5c42\u5f00\u53d1\u4e2d\u5e38\u89c1\u7684\u64cd\u4f5c\u3002</p>"},{"location":"408/4081-CL/macro/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%AE%8F/#_2","title":"\ud83d\udd0d \u4e8c\u3001\u5bf9\u9f50\u7684\u6570\u5b66\u539f\u7406","text":"<p>\u76ee\u6807\uff1a\u5c06 <code>size</code> \u5411\u4e0a\u53d6\u6574\u4e3a <code>ALIGNMENT</code> \u7684\u500d\u6570\u3002</p> <ul> <li> <p>\u82e5 <code>ALIGNMENT = 8</code>\uff0c\u5219\uff1a</p> <ul> <li> <p><code>0 \u2192 0</code></p> </li> <li> <p><code>1~8 \u2192 8</code></p> </li> <li> <p><code>9~16 \u2192 16</code></p> </li> <li> <p>\u2026</p> </li> </ul> </li> </ul> <p>\u5173\u952e\u64cd\u4f5c\uff1a</p> <pre><code>((size) + ALIGNMENT - 1) &amp; ~(ALIGNMENT - 1)\n</code></pre> <ol> <li> <p>\u52a0\u6cd5\u9636\u6bb5\uff1a<code>size + ALIGNMENT - 1</code></p> <ul> <li> <p>\u786e\u4fdd\u4efb\u4f55\u5c0f\u4e8e <code>ALIGNMENT</code> \u7684\u504f\u79fb\u90fd\u80fd\u8fdb\u4f4d\u5230\u4e0b\u4e00\u4e2a\u500d\u6570\uff1b</p> </li> <li> <p>\u4f8b\u5982 <code>size = 5</code>\uff0c<code>ALIGNMENT = 8</code>\uff0c\u5219 <code>5 + 7 = 12</code>\u3002</p> </li> </ul> </li> <li> <p>\u6309\u4f4d\u4e0e\u9636\u6bb5\uff1a<code>&amp; ~(ALIGNMENT - 1)</code></p> <ul> <li> <p>\u7528\u4e8e\u6e05\u9664\u4f4e\u4f4d\u7684\u975e\u5bf9\u9f50\u4f4d\uff1b</p> </li> <li> <p><code>~(ALIGNMENT - 1)</code> \u662f\u5c06\u6700\u4f4e\u7684 log2(ALIGNMENT) \u4f4d\u6e05\u96f6\u7684\u63a9\u7801\uff08mask\uff09\uff1a</p> <ul> <li>\u6bd4\u5982 <code>ALIGNMENT = 8</code> \u2192 <code>~(0b111)</code> \u2192 <code>0b11111000</code></li> </ul> </li> <li> <p>\u8fd9\u4e00\u6b65\u5b9e\u9645\u7b49\u4ef7\u4e8e\uff1a\u5c06\u7ed3\u679c\u5411\u4e0b\u820d\u5165\u4e3a <code>ALIGNMENT</code> \u7684\u500d\u6570\u3002</p> </li> </ul> </li> </ol> <p>\ud83d\udccc \u6700\u7ec8\u6548\u679c\uff1a\u7ec4\u5408\u4ee5\u4e0a\u4e24\u6b65\uff0c\u6574\u4f53\u6548\u679c\u4e3a\u5411\u4e0a\u5bf9\u9f50\u3002</p>"},{"location":"408/4081-CL/macro/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%AE%8F/#_3","title":"\ud83e\udde0 \u4e09\u3001\u6280\u5de7\u603b\u7ed3","text":"\u6280\u5de7 \u63cf\u8ff0 <code>+ ALIGNMENT - 1</code> \u4fdd\u8bc1\u4e0d\u6ee1\u4e00\u4e2a\u5355\u4f4d\u7684\u4e5f\u80fd\u8fdb\u4f4d <code>&amp; ~(ALIGNMENT - 1)</code> \u6e05\u9664\u4e0d\u5bf9\u9f50\u7684\u4f4e\u4f4d\uff0c\u7528\u4e8e\u820d\u5165 \u4f7f\u7528 2 \u7684\u5e42\u4f5c\u4e3a ALIGNMENT \u4e0a\u8ff0\u64cd\u4f5c\u53ea\u5bf9 2 \u7684\u5e42\u6709\u6548\uff08\u63a9\u7801\u624d\u6709\u6548\uff09"},{"location":"408/4081-CL/macro/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%AE%8F/#_4","title":"\ud83d\udcd0 \u56db\u3001\u901a\u7528\u8303\u5f0f","text":"<pre><code>// \u5411\u4e0a\u5bf9\u9f50\n#define ALIGN_UP(x, align)   (((x) + (align) - 1) &amp; ~((align) - 1))\n\n// \u5411\u4e0b\u5bf9\u9f50\uff08floor\uff09\n#define ALIGN_DOWN(x, align) ((x) &amp; ~((align) - 1))\n</code></pre>"},{"location":"408/4081-CL/macro/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%AE%8F/#_5","title":"\ud83d\udce6 \u4e94\u3001\u5b9e\u9645\u5e94\u7528\u573a\u666f","text":"<ul> <li> <p>\u5206\u914d\u5185\u5b58\u5757\uff08\u5982\u5806\u5206\u914d\u5668\uff09</p> </li> <li> <p>\u5bf9\u9f50\u7ed3\u6784\u4f53\u6210\u5458</p> </li> <li> <p>\u5b9e\u73b0\u5185\u5b58\u6c60\u6216 slab \u5206\u914d\u5668</p> </li> <li> <p>SIMD \u5411\u91cf\u52a0\u8f7d\u5bf9\u9f50</p> </li> </ul>"},{"location":"408/4081-CL/macro/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%AE%8F/#_6","title":"\u2705 \u793a\u4f8b","text":"<pre><code>#define ALIGNMENT 8\n#define ALIGN(size) (((size) + ALIGNMENT - 1) &amp; ~(ALIGNMENT - 1))\nint a = 13;\nint aligned_a = ALIGN(a);  // \u7ed3\u679c\u4e3a 16\n</code></pre>"},{"location":"408/4081-CL/macro/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E5%AE%8F/#_7","title":"\u26a0\ufe0f \u6ce8\u610f\u4e8b\u9879","text":"<ul> <li> <p><code>ALIGNMENT</code> \u5fc5\u987b\u662f 2 \u7684\u5e42\uff0c\u5426\u5219 <code>~(ALIGNMENT - 1)</code> \u63a9\u7801\u53ef\u80fd\u9519\u8bef\u3002</p> </li> <li> <p>\u5bf9\u9f50\u4e0d\u8db3\u6216\u8fc7\u5ea6\u53ef\u80fd\u5bfc\u81f4\u7a7a\u95f4\u6d6a\u8d39\u6216\u9519\u8bef\u884c\u4e3a\uff0c\u9700\u8c28\u614e\u4f7f\u7528\u3002</p> </li> </ul>"},{"location":"misc/git/gitignore/","title":"Gitignore","text":""},{"location":"misc/git/gitignore/#git","title":"\ud83e\uddfe Git \u5ffd\u7565\u7279\u5b9a\u6587\u4ef6\u6216\u6587\u4ef6\u5939\u901f\u67e5\u7b14\u8bb0","text":""},{"location":"misc/git/gitignore/#gitignore","title":"\ud83d\udcc2 \u57fa\u7840\u89c4\u5219\uff08<code>.gitignore</code> \u6587\u4ef6\uff09","text":"\u89c4\u5219\u8bed\u6cd5 \u4f5c\u7528 <code>filename</code> \u5ffd\u7565\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u67d0\u4e2a\u6587\u4ef6 <code>/folder/</code> \u5ffd\u7565\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6307\u5b9a\u6587\u4ef6\u5939 <code>*.log</code> \u5ffd\u7565\u6240\u6709 <code>.log</code> \u7ed3\u5c3e\u7684\u6587\u4ef6 <code>**/temp/</code> \u5ffd\u7565\u4efb\u610f\u4f4d\u7f6e\u7684 <code>temp/</code> \u6587\u4ef6\u5939 <code>!keep.txt</code> \u5f3a\u5236\u8ddf\u8e2a\u67d0\u4e2a\u539f\u672c\u4f1a\u88ab\u5ffd\u7565\u7684\u6587\u4ef6"},{"location":"misc/git/gitignore/#_1","title":"\ud83c\udfaf \u5e38\u89c1\u7528\u6cd5","text":""},{"location":"misc/git/gitignore/#1-site","title":"1. \u5ffd\u7565\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 <code>site/</code> \u6587\u4ef6\u5939\uff1a","text":"<pre><code>/site/\n</code></pre>"},{"location":"misc/git/gitignore/#2-obsidian-docsobsidian","title":"2. \u5ffd\u7565\u5b50\u8def\u5f84\u4e2d\u7684 <code>.obsidian/</code> \u6587\u4ef6\u5939\uff08\u5982 <code>docs/.obsidian/</code>\uff09\uff1a","text":"<pre><code>/docs/.obsidian/\n</code></pre>"},{"location":"misc/git/gitignore/#3-ds_store","title":"3. \u5ffd\u7565\u6240\u6709\u76ee\u5f55\u4e0b\u7684 <code>.DS_Store</code> \u6587\u4ef6\uff1a","text":"<pre><code>**/.DS_Store\n</code></pre>"},{"location":"misc/git/gitignore/#4-node_modules","title":"4. \u5ffd\u7565\u6240\u6709 <code>node_modules</code> \u6587\u4ef6\u5939\uff1a","text":"<pre><code>node_modules/\n</code></pre>"},{"location":"misc/git/gitignore/#5-log-importantlog","title":"5. \u5ffd\u7565\u6240\u6709 <code>.log</code> \u6587\u4ef6\uff0c\u4f46\u4fdd\u7559 <code>important.log</code>\uff1a","text":"<pre><code>*.log\n!important.log\n</code></pre>"},{"location":"misc/git/gitignore/#git_1","title":"\u26a0\ufe0f \u5ffd\u7565\u5df2\u88ab Git \u8ddf\u8e2a\u7684\u6587\u4ef6\u6216\u6587\u4ef6\u5939","text":"<p>\u5982\u679c\u67d0\u6587\u4ef6\u6216\u6587\u4ef6\u5939 \u5df2\u88ab Git \u8ddf\u8e2a\uff0c<code>.gitignore</code> \u4e0d\u4f1a\u751f\u6548\uff0c\u9700\u5148\u5c06\u5176\u4ece\u7f13\u5b58\u4e2d\u79fb\u9664\uff1a</p> <pre><code>git rm -r --cached \u8def\u5f84\u540d\n</code></pre> <p>\u4f8b\u5982\uff1a</p> <pre><code>git rm -r --cached site\ngit rm -r --cached docs/.obsidian\n</code></pre> <p>\u7136\u540e\u63d0\u4ea4\u66f4\u6539\uff1a</p> <pre><code>git commit -m \"Stop tracking ignored files\"\n</code></pre>"},{"location":"misc/git/gitignore/#_2","title":"\u2705 \u63d0\u793a\u4e0e\u6700\u4f73\u5b9e\u8df5","text":"<ul> <li> <p><code>.gitignore</code> \u5e94\u653e\u5728\u4ed3\u5e93\u6839\u76ee\u5f55\u3002</p> </li> <li> <p>\u53ef\u4ee5\u521b\u5efa\u591a\u7ea7 <code>.gitignore</code>\uff08\u5982\u5b50\u6587\u4ef6\u5939\u4e0b\uff09\u3002</p> </li> <li> <p>\u53ef\u4f7f\u7528 GitHub \u63d0\u4f9b\u7684 <code>.gitignore</code> \u6a21\u677f\uff1ahttps://github.com/github/gitignore</p> </li> <li> <p>\u82e5\u4e0d\u786e\u5b9a\u662f\u5426\u5ffd\u7565\u6210\u529f\uff0c\u53ef\u8fd0\u884c\uff1a</p> </li> </ul> <pre><code>git check-ignore -v \u8def\u5f84\u540d\n</code></pre>"},{"location":"misc/mkdocs/mkdocs/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"misc/mkdocs/mkdocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"misc/mkdocs/mkdocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"}]}